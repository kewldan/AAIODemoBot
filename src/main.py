import asyncio
import logging
from re import Match
from uuid import uuid1

from aaio import AAIO
from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import config

bot = Bot(config['token'], parse_mode=ParseMode.HTML)
dp = Dispatcher()
router = Router()
dp.include_router(router)
aaio = AAIO(config['merchant_id'], config['secret'], config['key'])


async def main():
    logging.basicConfig(level=logging.DEBUG)

    balance = await aaio.get_balances()
    print('–ë–∞–ª–∞–Ω—Å—ã:', balance)

    ips = await aaio.get_ips()
    print('IP –∞–¥—Ä–µ—Å–∞ AAIO:', ips)

    await dp.start_polling(bot)


@router.message(CommandStart())
async def on_start_command(message: Message):
    builder = InlineKeyboardBuilder()

    builder.button(text='üíµ –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç—ë–∂', callback_data='create_payment')

    await message.answer('üëã –ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ—Ç –±–æ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ AAIO –¥–ª—è Python!\n'
                         '\n'
                         '–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞: https://github.com/kewldan/AAIODemoBot\n'
                         '–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞: https://kewldan.vercel.app/projects/aaio',
                         reply_markup=builder.as_markup())


@router.callback_query(F.data == 'create_payment')
async def on_create_payment_callback(query: CallbackQuery):
    builder = InlineKeyboardBuilder()

    order_id = str(uuid1())  # Order ID must be saved to your database, because user can get product twice

    payment_url = aaio.create_payment(100, order_id, '–≠—Ç–æ—Ç –ø–ª–∞—Ç—ë–∂ –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –±–∏–±–ª–∏–æ—Ç–µ–∫–∏')

    builder.button(text='üí∞ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url=payment_url)
    builder.button(text='üîÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂', callback_data=f'check_payment_{order_id}')

    builder.adjust(1)

    await query.message.edit_text('ü§ñ –û–ø–ª–∞—Ç–∏—Ç–µ —Å—á—ë—Ç –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è', reply_markup=builder.as_markup())


@router.callback_query(F.data.regexp(
    r"^check_payment_([0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12})$").as_(
    "match"))
async def on_check_payment_callback(query: CallbackQuery, match: Match[str]):
    order_id = match.group(1)

    payment_info = await aaio.get_payment_info(order_id)
    if payment_info.is_success():
        await query.message.edit_text('‚úÖ –°—á—ë—Ç –æ–ø–ª–∞—á–µ–Ω')
    else:
        await query.answer('‚ùå –°—á—ë—Ç –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã')


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
